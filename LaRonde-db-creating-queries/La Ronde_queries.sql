USE indproj;
/* INSY 661 individual project
    part I.1 La Ronde table
*/


/* Query 1: compare the total amount of money that customers spent on buying tickets with different payment methods in year 2020. 
			This is to reveal which payment method was most preferred by customers. */
SELECT pm.payment_method_desc AS payment_methods, SUM(t.price) AS total_money_spent
FROM ticket AS t
INNER JOIN payment_method AS pm ON pm.payment_method_ID = t.payment_method_ID
WHERE YEAR(t.purchase_date) = 2020
GROUP BY t.payment_method_ID
ORDER BY SUM(t.price) DESC;


/* Query 2: find the ticket category that generated the most revenue in year 2020 
			(exclude the revenues generated by tickets that were applied with promo code) */
SELECT tc.category_of_ticket_desc AS ticket_type, SUM(t.price) AS revenue
FROM ticket AS t
INNER JOIN ticket_category AS tc ON t.category_of_ticket_ID = tc.category_of_ticket_ID
WHERE YEAR(t.purchase_date) = 2019
AND promo_applied = 1
GROUP BY tc.category_of_ticket_ID
ORDER BY SUM(t.price) DESC;


/* Query 3: compare the number of tickets of different ticket categories that were purchased via different purchase modes. 
			This query helps La Ronde to know the preference about purchase mode of customers that bought different types of tickets.  */
SELECT ap.p_mode AS purchase_mode, ap.annual_passes AS annual_pass, pt.parking_tickets AS parking_ticket, dp.daily_passes AS daily_pass
FROM (
		SELECT t.purchase_mode AS p_mode, COUNT(t.ticket_id) AS annual_passes
		FROM Ticket AS t
		INNER JOIN ticket_category AS tc ON tc.category_of_ticket_ID = t.category_of_ticket_ID
		WHERE t.category_of_ticket_ID = 1
		GROUP BY t.purchase_mode
        ) AS ap
INNER JOIN (
		SELECT t2.purchase_mode AS p_mode, COUNT(t2.ticket_id) AS parking_tickets
		FROM Ticket AS t2
		INNER JOIN ticket_category AS tc2 ON tc2.category_of_ticket_ID = t2.category_of_ticket_ID
		WHERE t2.category_of_ticket_ID = 2
		GROUP BY t2.purchase_mode
        ) AS pt ON pt.p_mode = ap.p_mode
INNER JOIN (
		SELECT t3.purchase_mode AS p_mode, COUNT(t3.ticket_id) AS daily_passes
		FROM Ticket AS t3
		INNER JOIN ticket_category AS tc3 ON tc3.category_of_ticket_ID = t3.category_of_ticket_ID
		WHERE t3.category_of_ticket_ID = 3
		GROUP BY t3.purchase_mode
        ) AS dp ON dp.p_mode = ap.p_mode;


/* Query 4: to calculate the proportion of customers of each age intervals. 
			This query allows us to know which age group the main source of customers belong to and adjust La Ronde’s entertainment strategy accordingly.  */
-- create column
ALTER TABLE Customer
ADD COLUMN age_interval varchar(255);
SET SQL_SAFE_UPDATES = 0;

UPDATE Customer
SET age_interval = 'kid'
WHERE YEAR(dob)>=2006;

UPDATE Customer
SET age_interval = 'young'
WHERE YEAR(dob)<2006 AND YEAR(dob)>=1986;

UPDATE Customer
SET age_interval = 'middle'
WHERE YEAR(dob)<1986 AND YEAR(dob)>=1971;

UPDATE Customer
SET age_interval = 'elder'
WHERE YEAR(dob)<1971;

-- query part
SELECT kid.count/main.total AS kid_proportion, 
	young.count/main.total AS young_proportion, 
	middle.count/main.total AS middle_proportion, 
	elder.count/main.total AS elder_proportion
FROM (
	SELECT COUNT(ticket_ID) AS total
	FROM Ticket
    ) AS main
INNER JOIN (
	SELECT COUNT(c.C_ID) AS count
	FROM Ticket AS t
	INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
	WHERE c.age_interval = "kid"
    ) AS kid
INNER JOIN (
	SELECT COUNT(c.C_ID) AS count
	FROM Ticket AS t
	INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
	WHERE c.age_interval = "young"
    ) AS young
INNER JOIN (
	SELECT COUNT(c.C_ID) AS count
	FROM Ticket AS t
	INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
	WHERE c.age_interval = "middle"
    ) AS middle
INNER JOIN (
	SELECT COUNT(c.C_ID) AS count
	FROM Ticket AS t
	INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
	WHERE c.age_interval = "elder"
    ) AS elder;


/* Query 5：to know if young and kid customers from different age groups had similar preferences of rides, 
			i.e. to show the overlaps on young customers’ and kids’ lists of top 10 preferred rides. */
SELECT DISTINCT young.names_r AS Same_preference, young.id AS Same_preference_id, young.young_times AS times_played_by_young, kid.kids_times AS times_played_by_kids
FROM (
	SELECT r.ride_name AS names_r, rt.ride_id AS id, COUNT(rt.ride_id) AS young_times
	FROM Ticket AS t
	INNER JOIN Customer AS c ON t.customer_ID = c.C_ID
	INNER JOIN Rides_tickets AS rt ON rt.ticket_id = t.ticket_id
    INNER JOIN Ride AS r ON r.ride_id = rt.ride_id
	WHERE c.age_interval = 'young'
	GROUP BY rt.ride_id
	ORDER BY COUNT(rt.ride_id) DESC
	LIMIT 10) AS young
INNER JOIN(
	SELECT rt.ride_id AS id, COUNT(rt.ride_id) AS kids_times
	FROM Ticket AS t
	INNER JOIN Customer AS c ON t.customer_ID = c.C_ID
	INNER JOIN Rides_tickets AS rt ON rt.ticket_id = t.ticket_id
	WHERE c.age_interval = 'kid'
	GROUP BY rt.ride_id
	ORDER BY COUNT(rt.ride_id) DESC
    LIMIT 10
    ) AS kid ON kid.id = young.id
ORDER BY young.young_times DESC;


/* Query 6: Find the 5 young customers who played the rides the most times in year 2019. 
			This query helps La Ronde to find the young customers who had the greatest enthusiasm for the rides in the park. */
SELECT COUNT(rt.ride_ticket_id) AS total_play_times, c.first_name, c.last_name
FROM rides_tickets AS rt
INNER JOIN Ticket AS t ON rt.ticket_ID = t.ticket_ID
INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
WHERE t.ticket_id IN (
	SELECT DISTINCT t.ticket_id
    FROM ticket AS t
    INNER JOIN Customer AS c ON  t.customer_ID = c.C_ID
    WHERE c.age_interval = 'young'
    )
AND YEAR(ride_access_time) = 2019
GROUP BY c.first_name
ORDER BY COUNT(ride_ticket_id) DESC
LIMIT 5;


/* Query 7: Typically, dining facilities are not very popular when it is morning. 
			Therefore, knowing and investing in the dining facilities that could attract customers even in the mornings is important. 
            This query aims to find the dining facilities that were visited by more than 40 people in total in all of the mornings of 2020.  */
SELECT facility_desc, facility_type, facility_subtype, ft.count AS number_of_people_visited
FROM Facility AS f
INNER JOIN (
		SELECT facility_ID AS facid, COUNT(facility_ticket_ID) AS count
		FROM Facility_ticket
		WHERE YEAR(facility_access_time) = 2020
		AND HOUR(facility_access_time) < 12
		GROUP BY facility_ID
		HAVING COUNT(facility_ticket_ID) > 40
		ORDER BY COUNT(facility_ticket_ID) DESC
        ) AS ft ON ft.facid = f.facility_ID
WHERE facility_type = "Dinning";


/* Query 8: to filter out the facilities of which the popularity is above average across all years. */
SELECT facility_desc, facility_type, facility_subtype, sub1.count1 AS visits
FROM Facility AS f
INNER JOIN (SELECT facility_ID AS facid1, COUNT(facility_ticket_ID) AS count1
	FROM Facility_ticket
	GROUP BY facility_ID) AS sub1 ON sub1.facid1 = f.facility_ID
WHERE sub1.count1 > (SELECT AVG(sub2.count) AS average_visit_times
					FROM (SELECT facility_ID AS facid, COUNT(facility_ticket_ID) AS count
					FROM Facility_ticket
					GROUP BY facility_ID) AS sub2
                    )
ORDER BY sub1.count1 DESC;


/* Q9: La Ronde cares about customers’ loyalty. 
		This query is to find the customers whose times of visiting the park on different dates are above average in year 2020
		(find the returning customers). */
SELECT CONCAT(c.first_name, " ", c.last_name) AS customer_name, COUNT(c.C_ID) AS visit_times_of_customer, c.C_ID
FROM Rides_tickets AS rt
INNER JOIN Ticket AS t ON rt.ticket_ID = t.ticket_ID
INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
WHERE YEAR(ride_access_time) = 2020
GROUP BY c.C_ID, DAY(ride_access_time)
HAVING COUNT(c.C_ID) > (
	SELECT AVG(sub.visit_times_of_customer) AS avg_visit_times
	FROM (
		SELECT CONCAT(c.first_name, " ", c.last_name) AS name_c, COUNT(c.C_ID) AS visit_times_of_customer
		FROM Rides_tickets AS rt
		INNER JOIN Ticket AS t ON rt.ticket_ID = t.ticket_ID
		INNER JOIN Customer AS c ON c.C_ID = t.customer_ID
		WHERE YEAR(ride_access_time) = 2020
		GROUP BY c.C_ID, DAY(ride_access_time)) AS sub
		)
ORDER BY COUNT(c.C_ID) DESC;
        

/* Query 10: from above query, we noticed that Berta Drewery (C_ID = “CD0092”), a loyal customer, visited La Ronde for 11 times in year 2020. 
			This query is to find that, among the facilities of which the popularity is above average, 
            which facility(ies) did Berta visited in year 2020. */
SELECT CONCAT(c.first_name, " ", c.last_name) AS customer_name, f.facility_desc, ft.facility_access_time
FROM Ticket AS t
INNER JOIN Customer AS c ON t.customer_ID = c.C_ID
INNER JOIN Facility_ticket AS ft ON ft.ticket_ID = t.ticket_ID
INNER JOIN Facility AS f ON f.facility_ID = ft.facility_ID
WHERE c.C_ID = "CD0092"
AND YEAR(facility_access_time) = 2020
AND facility_desc IN (
	SELECT f1.facility_desc
	FROM Facility AS f1
	INNER JOIN (SELECT facility_ID AS facid1, COUNT(facility_ticket_ID) AS count1
		FROM Facility_ticket
		GROUP BY facility_ID) AS sub1 ON sub1.facid1 = f.facility_ID
	WHERE sub1.count1 > (SELECT AVG(sub2.count) AS average_visit_times
					FROM (SELECT facility_ID AS facid, COUNT(facility_ticket_ID) AS count
					FROM Facility_ticket
					GROUP BY facility_ID) AS sub2
                    )
	ORDER BY sub1.count1 DESC);
     
        
        
        
        
        
        
        
        
        
        
        
        